var documenterSearchIndex = {"docs":
[{"location":"api/#Library-Reference","page":"Library Reference","title":"Library Reference","text":"","category":"section"},{"location":"api/#Lower-Bound-Algorithms","page":"Library Reference","title":"Lower Bound Algorithms","text":"","category":"section"},{"location":"api/#CliqueTrees.LowerBoundAlgorithm","page":"Library Reference","title":"CliqueTrees.LowerBoundAlgorithm","text":"LowerBoundAlgorithm\n\nAn algorithm for computing a lower bound to the treewidth of a graph. The options are\n\ntype name time space\nMMW minor-min-width  O(m + n)\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.MMW","page":"Library Reference","title":"CliqueTrees.MMW","text":"MMW{S} <: LowerBoundAlgorithm\n\nMMW{S}()\n\nThe minor-min-width heuristic.\n\njulia> using CliqueTrees\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg = MMW{1}()\nMMW{1}\n\njulia> lowerbound(graph; alg)\n2\n\nParameters\n\nS: strategy\n1: min-d (fast)\n2: max-d (fast)\n3: least-c (slow)\n\nReferences\n\nGogate, Vibhav, and Rina Dechter. \"A complete anytime algorithm for treewidth.\" Proceedings of the 20th conference on Uncertainty in artificial intelligence. 2004.\nBodlaender, Hans, Thomas Wolle, and Arie Koster. \"Contraction and treewidth lower bounds.\" Journal of Graph Algorithms and Applications 10.1 (2006): 5-49.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.lowerbound","page":"Library Reference","title":"CliqueTrees.lowerbound","text":"lowerbound([weights, ]graph;\n    alg::WidthOrAlgorithm=DEFAULT_LOWER_BOUND_ALGORITHM)\n\nCompute a lower bound to the treewidth of a graph.\n\njulia> using CliqueTrees\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> lowerbound(graph)\n2\n\n\n\n\n\n","category":"function"},{"location":"api/#CliqueTrees.DEFAULT_LOWER_BOUND_ALGORITHM","page":"Library Reference","title":"CliqueTrees.DEFAULT_LOWER_BOUND_ALGORITHM","text":"DEFAULT_LOWER_BOUND_ALGORITHM = MMW()\n\n\n\n\n\n","category":"constant"},{"location":"api/#Dissection-Algorithms","page":"Library Reference","title":"Dissection Algorithms","text":"","category":"section"},{"location":"api/#CliqueTrees.DissectionAlgorithm","page":"Library Reference","title":"CliqueTrees.DissectionAlgorithm","text":"DissectionAlgorithm\n\nA vertex separator algorithm.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.METISND","page":"Library Reference","title":"CliqueTrees.METISND","text":"METISND <: DissectionAlgorithm\n\nMETISND(; nseps=-1, seed=-1)\n\nCompute a vertex separator using the graph partitioning library METIS.\n\nParameters\n\nnseps: number of different separators computed at each level of nested dissection\nseed: random seed\n\nReferences\n\nKarypis, George, and Vipin Kumar. \"A fast and high quality multilevel scheme for partitioning irregular graphs.\" SIAM Journal on Scientific Computing 20.1 (1998): 359-392.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.KaHyParND","page":"Library Reference","title":"CliqueTrees.KaHyParND","text":"KaHyParND{O} <: DissectionAlgorithm\n\nKaHyParND(order; beta=1.0)\n\nCompute a vertex separator using the hypergraph partitioning library KaHyPar. A β-quasi-clique cover is constructed using a greedy algorithm controlled by the parameters order and beta.\n\nParameters\n\norder: tie breaking strategy (Forward or Reverse).\nbeta: quasi-clique parameter\n\nReferences\n\nÇatalyürek, Ümit V., Cevdet Aykanat, and Enver Kayaaslan. \"Hypergraph partitioning-based fill-reducing ordering for symmetric matrices.\" SIAM Journal on Scientific Computing 33.4 (2011): 1996-2023.\nKaya, Oguz, et al. \"Fill-in reduction in sparse matrix factorizations using hypergraphs\".\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.DEFAULT_DISSECTION_ALGORITHM","page":"Library Reference","title":"CliqueTrees.DEFAULT_DISSECTION_ALGORITHM","text":"DEFAULT_DISSECTION_ALGORITHM = METISND()\n\nThe default dissection algorithm.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Elimination-Algorithms","page":"Library Reference","title":"Elimination Algorithms","text":"","category":"section"},{"location":"api/#CliqueTrees.EliminationAlgorithm","page":"Library Reference","title":"CliqueTrees.EliminationAlgorithm","text":"EliminationAlgorithm\n\nA graph elimination algorithm computes a total ordering of the vertices of a graph.  The algorithms implemented in CliqueTrees.jl can be divided into five categories.\n\ntriangulation recognition algorithms\nbandwidth reduction algorithms\ngreedy algorithms\nnested dissection algorithms\nexact treewidth algorithms\n\nTriangulation Recognition Algorithms\n\ntype name time space package\nMCS maximum cardinality search O(m + n) O(n) \nLexBFS lexicographic breadth-first search O(m + n) O(m + n) \nMCSM maximum cardinality search (minimal) O(mn) O(n) \nLexM lexicographic breadth-first search (minimal) O(mn) O(n) \n\nThese algorithms will compute perfect orderings when applied to chordal graphs.\n\nBandwidth and Envelope Minimization Algorithms\n\ntype name time space package\nRCMMD reverse Cuthill-Mckee (minimum degree) O(m + n) O(m + n) \nRCMGL reverse Cuthill-Mckee (George-Liu) O(m + n) O(m + n) \n\nThese algorithms try to minimize the bandwidth and envelope of the ordered graph.\n\nLocal Algorithms\n\ntype name time space package\nMMD multiple minimum degree O(mn²) O(m + n) \nMF minimum fill O(mn²)  \nAMD approximate minimum degree O(mn) O(m + n) AMD.jl\nSymAMD column approximate minimum degree O(mn) O(m + n) AMD.jl\nAMF approximate minimum fill O(mn) O(m + n) \n\nThese algorithms simulate the graph elimination process, greedily eliminating vertices that minimize a cost function. They are faster then the nested dissection algorithms, but have worse results.\n\nGlobal Algorithms\n\ntype name time space package\nMETIS nested dissection   Metis.jl\nND nested dissection   \n\nThese algorithms recursively partition a graph, then call a local algorithm on the leaves. These are slower than the local algorithms, but have better results.\n\nExact Treewidth Algorithms\n\ntype name time space package\nBT Bouchitte-Todinca   TreeWidthSolver.jl\nSAT SAT encoding   \n\nThe orderings computed by these algorithms induce minimum-width tree decompositions.\n\nwarning: Warning\nThis is an NP-hard problem.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.PermutationOrAlgorithm","page":"Library Reference","title":"CliqueTrees.PermutationOrAlgorithm","text":"PermutationOrAlgorithm = Union{\nAbstractVector,\nTuple{AbstractVector, AbstractVector},\nEliminationAlgorithm,\n\n}\n\nEither a permutation or an algorithm.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.DEFAULT_ELIMINATION_ALGORITHM","page":"Library Reference","title":"CliqueTrees.DEFAULT_ELIMINATION_ALGORITHM","text":"DEFAULT_ELIMINATION_ALGORITHM = MMD()\n\nThe default algorithm.\n\n\n\n\n\n","category":"constant"},{"location":"api/#CliqueTrees.BFS","page":"Library Reference","title":"CliqueTrees.BFS","text":"BFS <: EliminationAlgorithm\n\nBFS()\n\nThe breadth-first search algorithm.\n\njulia> using CliqueTrees\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg = BFS()\nBFS\n\njulia> treewidth(graph; alg)\n2\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.MCS","page":"Library Reference","title":"CliqueTrees.MCS","text":"MCS <: EliminationAlgorithm\n\nMCS()\n\nThe maximum cardinality search algorithm.\n\njulia> using CliqueTrees\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg = MCS()\nMCS\n\njulia> treewidth(graph; alg)\n3\n\nReferences\n\nTarjan, Robert E., and Mihalis Yannakakis. \"Simple linear-time algorithms to test chordality of graphs, test acyclicity of hypergraphs, and selectively reduce acyclic hypergraphs.\" SIAM Journal on Computing 13.3 (1984): 566-579.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.LexBFS","page":"Library Reference","title":"CliqueTrees.LexBFS","text":"LexBFS <: EliminationAlgorithm\n\nLexBFS()\n\nThe lexicographic breadth-first-search algorithm.\n\njulia> using CliqueTrees\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg = LexBFS()\nLexBFS\n\njulia> treewidth(graph; alg)\n2\n\nReferences\n\nRose, Donald J., R. Endre Tarjan, and George S. Lueker. \"Algorithmic aspects of vertex elimination on graphs.\" SIAM Journal on Computing 5.2 (1976): 266-283.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.RCMMD","page":"Library Reference","title":"CliqueTrees.RCMMD","text":"RCMMD{A} <: EliminationAlgorithm\n\nRCMMD(alg::Algorithm)\n\nRCMMD()\n\nThe reverse Cuthill-McKee algorithm. An initial vertex is selected using the minimum degree heuristic.\n\njulia> using CliqueTrees\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg = RCMMD(QuickSort)\nRCMMD:\n    Base.Sort.QuickSortAlg()\n\njulia> treewidth(graph; alg)\n3\n\nParameters\n\nalg: sorting algorithm\n\nReferences\n\nCuthill, Elizabeth, and James McKee. \"Reducing the bandwidth of sparse symmetric matrices.\" Proceedings of the 1969 24th National Conference. 1969.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.RCMGL","page":"Library Reference","title":"CliqueTrees.RCMGL","text":"RCMGL{A} <: EliminationAlgorithm\n\nRCMGL(alg::Algorithm)\n\nRCMGL()\n\nThe reverse Cuthill-McKee algorithm. An initial vertex is selected using George and Liu's variant of the GPS algorithm.\n\njulia> using CliqueTrees\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg = RCMGL(QuickSort)\nRCMGL:\n    Base.Sort.QuickSortAlg()\n\njulia> treewidth(graph; alg)\n3\n\nParameters\n\nalg: sorting algorithm\n\nReferences\n\nCuthill, Elizabeth, and James McKee. \"Reducing the bandwidth of sparse symmetric matrices.\" Proceedings of the 1969 24th National Conference. 1969.\nGeorge, Alan, and Joseph WH Liu. \"An implementation of a pseudoperipheral node finder.\" ACM Transactions on Mathematical Software (TOMS) 5.3 (1979): 284-295.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.RCM","page":"Library Reference","title":"CliqueTrees.RCM","text":"RCM = RCMGL\n\nThe default variant of the reverse Cuthill-Mckee algorithm.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.LexM","page":"Library Reference","title":"CliqueTrees.LexM","text":"LexM <: EliminationAlgorithm\n\nLexM()\n\nA minimal variant of the lexicographic breadth-first-search algorithm.\n\njulia> using CliqueTrees\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg = LexM()\nLexM\n\njulia> treewidth(graph; alg)\n2\n\nReferences\n\nRose, Donald J., R. Endre Tarjan, and George S. Lueker. \"Algorithmic aspects of vertex elimination on graphs.\" SIAM Journal on Computing 5.2 (1976): 266-283.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.MCSM","page":"Library Reference","title":"CliqueTrees.MCSM","text":"MCSM <: EliminationAlgorithm\n\nMCSM()\n\nA minimal variant of the maximal cardinality search algorithm.\n\njulia> using CliqueTrees\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg = MCSM()\nMCSM\n\njulia> treewidth(graph; alg)\n2\n\nReferences\n\nBerry, Anne, et al. \"Maximum cardinality search for computing minimal triangulations of graphs.\" Algorithmica 39 (2004): 287-298.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.AMD","page":"Library Reference","title":"CliqueTrees.AMD","text":"AMD <: EliminationAlgorithm\n\nAMD(; dense=10.0, aggressive=1.0)\n\nThe approximate minimum degree algorithm.\n\njulia> using CliqueTrees\n\njulia> import AMD as AMDLib\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg = AMD(; dense=5.0, aggressive=2.0)\nAMD:\n    dense: 5.0\n    aggressive: 2.0\n\njulia> treewidth(graph; alg)\n2\n\nParameters\n\ndense: dense row parameter\naggressive: aggressive absorption\n\nReferences\n\nAmestoy, Patrick R., Timothy A. Davis, and Iain S. Duff. \"An approximate minimum degree ordering algorithm.\" SIAM Journal on Matrix Analysis and Applications 17.4 (1996): 886-905.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.SymAMD","page":"Library Reference","title":"CliqueTrees.SymAMD","text":"SymAMD <: EliminationAlgorithm\n\nSymAMD(; dense_row=10.0, dense_col=10.0, aggressive=1.0)\n\nThe column approximate minimum degree algorithm.\n\njulia> using CliqueTrees\n\njulia> import AMD as AMDLib\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg = SymAMD(; dense_row=5.0, dense_col=5.0, aggressive=2.0)\nSymAMD:\n    dense_row: 5.0\n    dense_col: 5.0\n    aggressive: 2.0\n\n\njulia> treewidth(graph, alg)\n2\n\nParameters\n\ndense_row: dense row parameter\ndense_column: dense column parameter\naggressive: aggressive absorption\n\nReferences\n\nDavis, Timothy A., et al. \"A column approximate minimum degree ordering algorithm.\" ACM Transactions on Mathematical Software (TOMS) 30.3 (2004): 353-376.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.AMF","page":"Library Reference","title":"CliqueTrees.AMF","text":"AMF <: EliminationAlgorithm\n\nAMF()\n\nThe approximate minimum fill algorithm.\n\njulia> using CliqueTrees\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg = AMF(; speed=2)\nAMF\n\njulia> treewidth(graph; alg)\n2\n\nReferences\n\nRothberg, Edward, and Stanley C. Eisenstat. \"Node selection strategies for bottom-up sparse matrix ordering.\" SIAM Journal on Matrix Analysis and Applications 19.3 (1998): 682-695.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.MF","page":"Library Reference","title":"CliqueTrees.MF","text":"MF <: EliminationAlgorithm\n\nMF()\n\nThe greedy minimum fill algorithm.\n\njulia> using CliqueTrees\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg = MF\nMF\n\njulia> treewidth(graph; alg)\n2\n\nReferences\n\nTinney, William F., and John W. Walker. \"Direct solutions of sparse network equations by optimally ordered triangular factorization.\" Proceedings of the IEEE 55.11 (1967): 1801-1809.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.MMD","page":"Library Reference","title":"CliqueTrees.MMD","text":"MMD <: EliminationAlgorithm\n\nMMD(; delta=0)\n\nThe multiple minimum degree algorithm.\n\njulia> using CliqueTrees\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg = MMD(; delta=1)\nMMD:\n    delta: 1\n\njulia> treewidth(graph; alg)\n2\n\nParameters\n\ndelta: tolerance for multiple elimination\n\nReferences\n\nLiu, Joseph WH. \"Modification of the minimum-degree algorithm by multiple elimination.\" ACM Transactions on Mathematical Software (TOMS) 11.2 (1985): 141-153.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.METIS","page":"Library Reference","title":"CliqueTrees.METIS","text":"METIS <: EliminationAlgorithm\n\nMETIS(; ctype=-1, rtype=-1, nseps=-1, niter=-1, seed=-1,\n        compress=-1, ccorder=-1, pfactor=-1, ufactor=-1)\n\nThe multilevel nested dissection algorithm implemented in METIS.\n\njulia> using CliqueTrees, Metis\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg = METIS(ctype=Metis.METIS_CTYPE_RM)\nMETIS:\n    ctype: 0\n    rtype: -1\n    nseps: -1\n    niter: -1\n    seed: -1\n    compress: -1\n    ccorder: -1\n    pfactor: -1\n    ufactor: -1\n\n\njulia> treewidth(graph; alg)\n3\n\nParameters\n\nctype: matching scheme to be used during coarsening\nrtype: algorithm used for refinement\nnseps: number of different separators computed at each level of nested dissection\nniter: number of iterations for refinement algorithm at each stage of the uncoarsening process\nseed: random seed\ncompress: whether to combine vertices with identical adjacency lists\nccorder: whether to order connected components separately\npfactor: minimum degree of vertices that will be ordered last\nufactor: maximum allowed load imbalance partitions\n\nReferences\n\nKarypis, George, and Vipin Kumar. \"A fast and high quality multilevel scheme for partitioning irregular graphs.\" SIAM Journal on Scientific Computing 20.1 (1998): 359-392.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.ND","page":"Library Reference","title":"CliqueTrees.ND","text":"ND{S, A, D} <: EliminationAlgorithm\n\nND{S}(alg::EliminationAlgorithm, dis::DissectionAlgorithm;\n    width = 120,\n    level = 6,\n    imbalance = 130,\n)\n\nThe nested dissection algorithm. The algorithm dis is used to compute vertex separators, and the algorithm alg is called on the of the separator tree. The type parameter S controls the behavior of the algorithm: if S is equal to 1 or 2, then alg is additionally called on the branches of the separator tree. At each branch, the ordering computed by alg is compared to the ordering computed by the nested dissection algorithm, and the worse of the two is discarded.\n\n1: minimize width (slow)\n2: minimize fill (slow)\n3: no strategy (fast)\n\nCliqueTrees currently has two vertex separator algorithms, both of which require loading an external package.\n\ntype name package\nMETISND multilevel vertex separation Metis.jl\nKaHyParND multilevel hypergraph partitioning KayHyPar.jl\n\nThe algorithm KaHyParND computes a vertex separator indirectly, by partitioning a quasi-clique-cover of the original graph. The parameters width and level control the recursion depth of the algorithm, and the parameter imbalance controls the maximum imbalance of the vertex separator.\n\njulia> using CliqueTrees, Metis\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg = ND{1}(MF(), METISND())\nND{1, MF, METISND}:\n    MF\n    METISND:\n        nseps: -1\n        seed: -1\n    width: 120\n    level: 6\n    imbalance: 130\n\njulia> treewidth(graph; alg)\n2\n\nParameters\n\nS: strategy\n1: minimize width (slow)\n2: minimize fill (slow)\n3: no strategy (fast)\nalg: elimination algorithm\ndis: separation algorithm\nwidth: minimum width\nlevel: maximum level\nimbalance: separator imbalance\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.Spectral","page":"Library Reference","title":"CliqueTrees.Spectral","text":"Spectral <: EliminationAlgorithm\n\nSpectral(; tol=0.0)\n\nThe spectral ordering algorithm only works on connected graphs. In order to use it, import the package Laplacians.\n\njulia> using CliqueTrees, Laplacians\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg = Spectral(; tol=0.001)\nSpectral:\n    tol: 0.001\n\njulia> treewidth(graph; alg)\n4\n\nParameters\n\ntol: tolerance for convergence\n\nReferences\n\nBarnard, Stephen T., Alex Pothen, and Horst D. Simon. \"A spectral algorithm for envelope reduction of sparse matrices.\" Proceedings of the 1993 ACM/IEEE Conference on Supercomputing. 1993.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.FlowCutter","page":"Library Reference","title":"CliqueTrees.FlowCutter","text":"FlowCutter <: EliminationAlgorithm\n\nFlowCutter(; time=5, seed=0)\n\nThe FlowCutter algorithm.\n\njulia> using CliqueTrees, FlowCutterPACE17_jll\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg = FlowCutter(; time=2, seed=1)\nFlowCutter:\n    time: 2\n    seed: 1\n\njulia> treewidth(graph; alg)\n2\n\nParameters\n\ntime: run time\nseed: random seed\n\nReferences\n\nStrasser, Ben. \"Computing tree decompositions with flowcutter: PACE 2017 submission.\" arXiv preprint arXiv:1709.08949 (2017).\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.BT","page":"Library Reference","title":"CliqueTrees.BT","text":"BT <: EliminationAlgorithm\n\nBT()\n\nThe Bouchitte-Todinca algorithm.\n\njulia> using CliqueTrees, TreeWidthSolver\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg = BT()\nBT\n\njulia> treewidth(graph; alg)\n2\n\nReferences\n\nKorhonen, Tuukka, Jeremias Berg, and Matti Järvisalo. \"Solving Graph Problems via Potential Maximal Cliques: An Experimental Evaluation of the Bouchitté-Todinca Algorithm.\" Journal of Experimental Algorithmics (JEA) 24 (2019): 1-19.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.SAT","page":"Library Reference","title":"CliqueTrees.SAT","text":"SAT{H, A} <: EliminationAlgorithm\n\nSAT{H}(alg::PermutationOrAlgorithm)\n\nSAT{H}()\n\nCompute a minimum-treewidth permutation using a SAT solver.\n\njulia> using CliqueTrees, libpicosat_jll, PicoSAT_jll, CryptoMiniSat_jll, Lingeling_jll\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg = SAT{libpicosat_jll}(MF()) # picosat\nSAT{libpicosat_jll, MF}:\n    MF\n\njulia> alg = SAT{PicoSAT_jll}(MF()) # picosat\nSAT{PicoSAT_jll, MF}:\n    MF\n\njulia> alg = SAT{CryptoMiniSat_jll}(MF()) # cryptominisat\nSAT{CryptoMiniSat_jll, MF}:\n    MF\n\njulia> alg = SAT{Lingeling_jll}(MMW(), MF()) # lingeling\nSAT{Lingeling_jll, MF}:\n    MF\n\njulia> treewidth(graph; alg)\n2\n\nParameters\n\nalg: elimination algorithm\n\nReferences\n\nSamer, Marko, and Helmut Veith. \"Encoding treewidth into SAT.\" Theory and Applications of Satisfiability Testing-SAT 2009: 12th International Conference, SAT 2009, Swansea, UK, June 30-July 3, 2009. Proceedings 12. Springer Berlin Heidelberg, 2009.\nBerg, Jeremias, and Matti Järvisalo. \"SAT-based approaches to treewidth computation: An evaluation.\" 2014 IEEE 26th international conference on tools with artificial intelligence. IEEE, 2014.\nBannach, Max, Sebastian Berndt, and Thorsten Ehlers. \"Jdrasil: A modular library for computing tree decompositions.\" 16th International Symposium on Experimental Algorithms (SEA 2017). Schloss Dagstuhl–Leibniz-Zentrum fuer Informatik, 2017.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.MinimalChordal","page":"Library Reference","title":"CliqueTrees.MinimalChordal","text":"MinimalChordal{A} <: EliminationAlgorithm\n\nMinimalChordal(alg::PermutationOrAlgorithm)\n\nMinimalChordal()\n\nEvaluate an elimination algorithm, and them improve its output using the MinimalChordal algorithm. The result is guaranteed to be minimal.\n\njulia> using CliqueTrees\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg1 = MCS()\nMCS\n\njulia> alg2 = MinimalChordal(MCS())\nMinimalChordal{MCS}:\n    MCS\n\njulia> label1, tree1 = cliquetree(graph; alg=alg1);\n\njulia> label2, tree2 = cliquetree(graph; alg=alg2);\n\njulia> FilledGraph(tree1) # more edges\n{8, 12} FilledGraph{Int64, Int64}\n\njulia> FilledGraph(tree2) # fewer edges\n{8, 11} FilledGraph{Int64, Int64}\n\nParameters\n\nalg: elimination algorithm\n\nReferences\n\nBlair, Jean RS, Pinar Heggernes, and Jan Arne Telle. \"A practical algorithm for making filled graphs minimal.\" Theoretical Computer Science 250.1-2 (2001): 125-141.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.CompositeRotations","page":"Library Reference","title":"CliqueTrees.CompositeRotations","text":"CompositeRotations{C, A} <: EliminationAlgorithm\n\nCompositeRotations(clique::AbstractVector, alg::EliminationAlgorithm)\n\nCompositeRotations(clique::AbstractVector)\n\nEvaluate an eliminaton algorithm, ensuring that the given clique is at the end of the ordering.\n\njulia> using CliqueTrees\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg = CompositeRotations([2], MCS())\nCompositeRotations{Vector{Int64}, MCS}:\n    clique: [2]\n    MCS\n\njulia> order, index = permutation(graph; alg);\n\njulia> order # 2 is the last vertex in the ordering\n8-element Vector{Int64}:\n 4\n 5\n 7\n 8\n 3\n 6\n 1\n 2\n\nParameters\n\nclique: clique\nalg: elimination algorithm\n\nReferences\n\nLiu, Joseph WH. \"Equivalent sparse matrix reordering by elimination tree rotations.\" Siam Journal on Scientific and Statistical Computing 9.3 (1988): 424-444.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.SafeRules","page":"Library Reference","title":"CliqueTrees.SafeRules","text":"SafeRules{A, L, U} <: EliminationAlgorithm\n\nSafeRules(alg::EliminationAlgorithm, lb::WidthOrAlgorithm, ub::EliminationAlgororithm)\n\nSafeRules()\n\nPreprocess a graph using safe reduction rules. The algorithm lb is used to compute a lower bound to the treewidth; better lower bounds allow the algorithm to perform more reductions.\n\njulia> using CliqueTrees, TreeWidthSolver\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> alg1 = BT()\nBT\n\njulia> alg2 = SafeRules(BT(), MMW(), MF())\nSafeRules{BT, MMW, MF}:\n    BT\n    MMW\n    MF\n\njulia> @time treewidth(graph; alg=alg1) # slow\n  0.000177 seconds (1.41 k allocations: 90.031 KiB)\n2\n\njulia> @time treewidth(graph; alg=alg2) # fast\n  0.000044 seconds (282 allocations: 15.969 KiB)\n2\n\nParameters\n\nalg: elimination algorithm\nlb: lower bound algorithm (used to lower bound the treiwidth)\nub: elimination algorithm (used to upper bound the treewidth)\n\nReferences\n\nBodlaender, Hans L., et al. \"Pre-processing for triangulation of probabilistic networks.\" (2001).\nBodlaender, Hans L., Arie M.C.A. Koster, and Frank van den Eijkhof. \"Preprocessing rules for triangulation of probabilistic networks.\" Computational Intelligence 21.3 (2005): 286-305.\nvan den Eijkhof, Frank, Hans L. Bodlaender, and Arie M.C.A. Koster. \"Safe reduction rules for weighted treewidth.\" Algorithmica 47 (2007): 139-158. \n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.SafeSeparators","page":"Library Reference","title":"CliqueTrees.SafeSeparators","text":"SafeSeparators{M, A} <: EliminationAlgorithm\n\nSafeSeparators(alg::EliminationAlgorithm, min::PermutationOrAlgorithm)\n\nSafeSeparators(alg::EliminationAlgorithm)\n\nSafeSeparators()\n\nApple an elimination algorithm to the atoms of an almost-clique separator decomposition. The algorithm min is used to compute the decomposition.\n\nwarning: Warning\nThe algorithm min must compute a minimimal ordering. This property is guaranteed by the following algorithms:MCSM\nLexM\nMinimalChordal\n\nParameters\n\nalg: elimination algorithm\nmin: minimal elimination algorithm\n\nReferences\n\nBodlaender, Hans L., and Arie MCA Koster. \"Safe separators for treewidth.\" Discrete Mathematics 306.3 (2006): 337-350.\nTamaki, Hisao. \"A heuristic for listing almost-clique minimal separators of a graph.\" arXiv preprint arXiv:2108.07551 (2021).\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.ConnectedComponents","page":"Library Reference","title":"CliqueTrees.ConnectedComponents","text":"ConnectedComponents{A} <: EliminationAlgorithm\n\nConnectedComponents(alg::PermutationOrAlgorithm)\n\nConnectedComponents()\n\nApply an elimination algorithm to each connected component of a graph.\n\nParameters\n\nalg: elimination algorithm\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.permutation","page":"Library Reference","title":"CliqueTrees.permutation","text":"permutation([weights, ]graph;\n    alg::PermutationOrAlgorithm=DEFAULT_ELIMINATION_ALGORITHM)\n\nConstruct a fill-reducing permutation of the vertices of a simple graph.\n\njulia> using CliqueTrees\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> order, index = permutation(graph);\n\njulia> order\n8-element Vector{Int64}:\n 4\n 1\n 2\n 8\n 5\n 3\n 6\n 7\n\njulia> index == invperm(order)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"api/#CliqueTrees.mcs","page":"Library Reference","title":"CliqueTrees.mcs","text":"mcs(graph[, clique])\n\nPerform a maximum cardinality search, optionally specifying a clique to be ordered last. Returns the inverse permutation.\n\n\n\n\n\n","category":"function"},{"location":"api/#Supernodes","page":"Library Reference","title":"Supernodes","text":"","category":"section"},{"location":"api/#CliqueTrees.SupernodeType","page":"Library Reference","title":"CliqueTrees.SupernodeType","text":"SupernodeType\n\nA type of supernode partition. The options are\n\ntype name\nNodal nodal supernode partition\nMaximal maximal supernode partition\nFundamental fundamental supernode partition\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.DEFAULT_SUPERNODE_TYPE","page":"Library Reference","title":"CliqueTrees.DEFAULT_SUPERNODE_TYPE","text":"DEFAULT_SUPERNODE_TYPE = Maximal()\n\nThe default supernode partition.\n\n\n\n\n\n","category":"constant"},{"location":"api/#CliqueTrees.Nodal","page":"Library Reference","title":"CliqueTrees.Nodal","text":"Nodal <: SupernodeType\n\nA nodal  supernode partition.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.Maximal","page":"Library Reference","title":"CliqueTrees.Maximal","text":"Maximal <: SupernodeType\n\nA maximal supernode partition.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.Fundamental","page":"Library Reference","title":"CliqueTrees.Fundamental","text":"Fundamental <: SupernodeType\n\nA fundamental supernode partition.\n\n\n\n\n\n","category":"type"},{"location":"api/#Linked-Lists","page":"Library Reference","title":"Linked Lists","text":"","category":"section"},{"location":"api/#CliqueTrees.SinglyLinkedList","page":"Library Reference","title":"CliqueTrees.SinglyLinkedList","text":"SinglyLinkedList{I, Head, Next} <: AbstractLinkedList{I}\n\nSinglyLinkedList{I}(n::Integer)\n\nA singly linked list of distinct natural numbers. This type supports the iteration interface.\n\njulia> using CliqueTrees\n\njulia> list = SinglyLinkedList{Int}(10)\nSinglyLinkedList{Int64, Array{Int64, 0}, Vector{Int64}}:\n\njulia> pushfirst!(list, 4, 5, 6, 7, 8, 9)\nSinglyLinkedList{Int64, Array{Int64, 0}, Vector{Int64}}:\n 4\n 5\n 6\n 7\n 8\n ⋮\n\njulia> collect(list)\n6-element Vector{Int64}:\n 4\n 5\n 6\n 7\n 8\n 9\n\n\n\n\n\n","category":"type"},{"location":"api/#Trees","page":"Library Reference","title":"Trees","text":"","category":"section"},{"location":"api/#CliqueTrees.AbstractTree","page":"Library Reference","title":"CliqueTrees.AbstractTree","text":"AbstractTree{V} = Union{Tree{V}, SupernodeTree{V}, CliqueTree{V}}\n\nA rooted forest. This type implements the indexed tree interface.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.rootindices","page":"Library Reference","title":"CliqueTrees.rootindices","text":"rootindices(tree::AbstractTree)\n\nGet the roots of a rooted forest.\n\n\n\n\n\n","category":"function"},{"location":"api/#CliqueTrees.firstchildindex","page":"Library Reference","title":"CliqueTrees.firstchildindex","text":"firstchildindex(tree::AbstractTree, i::Integer)\n\nGet the first child of node i. Returns nothing if i is a leaf.\n\n\n\n\n\n","category":"function"},{"location":"api/#CliqueTrees.ancestorindices","page":"Library Reference","title":"CliqueTrees.ancestorindices","text":"ancestorindices(tree::AbstractTree, i::Integer)\n\nGet the proper ancestors of node i.\n\n\n\n\n\n","category":"function"},{"location":"api/#Trees-2","page":"Library Reference","title":"Trees","text":"","category":"section"},{"location":"api/#CliqueTrees.Tree","page":"Library Reference","title":"CliqueTrees.Tree","text":"Tree{V} <: AbstractUnitRange{V}\n\nTree(tree::AbstractTree)\n\nTree{V}(tree::AbstractTree) where V\n\nA rooted forest with vertices of type V. This type implements the indexed tree interface.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.eliminationtree","page":"Library Reference","title":"CliqueTrees.eliminationtree","text":"eliminationtree([weights, ]graph;\n    alg::PermutationOrAlgorithm=DEFAULT_ELIMINATION_ALGORITHM)\n\nConstruct a tree-depth decomposition of a simple graph.\n\njulia> using CliqueTrees\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> label, tree = eliminationtree(graph);\n\njulia> tree\n8-element Tree{Int64, Vector{Int64}, Array{Int64, 0}, Vector{Int64}, Vector{Int64}}:\n 8\n └─ 7\n    ├─ 5\n    └─ 6\n       ├─ 1\n       ├─ 3\n       │  └─ 2\n       └─ 4\n\n\n\n\n\n","category":"function"},{"location":"api/#Supernode-Trees","page":"Library Reference","title":"Supernode Trees","text":"","category":"section"},{"location":"api/#CliqueTrees.SupernodeTree","page":"Library Reference","title":"CliqueTrees.SupernodeTree","text":"SupernodeTree{V} <: AbstractVector{UnitRange{V}}\n\nA supernodal elimination tree with vertices of type V. This type implements the indexed tree interface.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.supernodetree","page":"Library Reference","title":"CliqueTrees.supernodetree","text":"supernodetree(graph;\n    alg::PermutationOrAlgorithm=DEFAULT_ELIMINATION_ALGORITHM,\n    snd::SupernodeType=DEFAULT_SUPERNODE_TYPE)\n\nConstruct a supernodal elimination tree.\n\n\n\n\n\n","category":"function"},{"location":"api/#Clique-Trees","page":"Library Reference","title":"Clique Trees","text":"","category":"section"},{"location":"api/#CliqueTrees.Clique","page":"Library Reference","title":"CliqueTrees.Clique","text":"Clique{V, E} <: AbstractVector{V}\n\nA clique of a clique tree.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.CliqueTree","page":"Library Reference","title":"CliqueTrees.CliqueTree","text":"CliqueTree{V, E} <: AbstractVector{Clique{V, E}}\n\nA clique tree with vertices of type V and edges of type E. This type implements the indexed tree interface.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.cliquetree","page":"Library Reference","title":"CliqueTrees.cliquetree","text":"cliquetree([weights, ]graph;\n    alg::PermutationOrAlgorithm=DEFAULT_ELIMINATION_ALGORITHM,\n    snd::SupernodeType=DEFAULT_SUPERNODE_TYPE)\n\nConstruct a tree decomposition of a simple graph. The vertices of the graph are first ordered by a fill-reducing permutation computed by the algorithm alg. The size of the resulting decomposition is determined by the supernode partition snd.\n\njulia> using CliqueTrees\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> label, tree = cliquetree(graph);\n\njulia> tree\n6-element CliqueTree{Int64, Int64}:\n [6, 7, 8]\n └─ [5, 7, 8]\n    ├─ [1, 5]\n    ├─ [3, 5, 7]\n    │  └─ [2, 3]\n    └─ [4, 5, 8]\n\n\n\n\n\n","category":"function"},{"location":"api/#CliqueTrees.treewidth","page":"Library Reference","title":"CliqueTrees.treewidth","text":"treewidth([weights, ]tree::CliqueTree)\n\nCompute the width of a clique tree.\n\njulia> using CliqueTrees\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> label, tree = cliquetree(graph);\n\njulia> treewidth(tree)\n2\n\n\n\n\n\ntreewidth([weights, ]graph;\n    alg::PermutationOrAlgorithm=DEFAULT_ELIMINATION_ALGORITHM)\n\nCompute the width induced by an elimination algorithm.\n\njulia> using CliqueTrees, TreeWidthSolver\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> treewidth(graph; alg=MCS())\n3\n\njulia> treewidth(graph; alg=BT()) # exact treewidth\n2\n\n\n\n\n\n","category":"function"},{"location":"api/#CliqueTrees.separator","page":"Library Reference","title":"CliqueTrees.separator","text":"separator(clique::Clique)\n\nGet the separator of a clique.\n\n\n\n\n\nseparator(tree::CliqueTree, i::Integer)\n\nGet the separator at node i.\n\n\n\n\n\n","category":"function"},{"location":"api/#CliqueTrees.residual","page":"Library Reference","title":"CliqueTrees.residual","text":"residual(clique::Clique)\n\nGet the residual of a clique.\n\n\n\n\n\nresidual(tree::CliqueTree, i::Integer)\n\nGet the residual at node i.\n\n\n\n\n\n","category":"function"},{"location":"api/#Filled-Graphs","page":"Library Reference","title":"Filled Graphs","text":"","category":"section"},{"location":"api/#CliqueTrees.FilledGraph","page":"Library Reference","title":"CliqueTrees.FilledGraph","text":"FilledGraph{V, E} <: AbstractGraph{V}\n\nA filled graph.\n\n\n\n\n\n","category":"type"},{"location":"api/#CliqueTrees.ischordal","page":"Library Reference","title":"CliqueTrees.ischordal","text":"ischordal(graph)\n\nDetermine whether a simple graph is chordal.\n\n\n\n\n\n","category":"function"},{"location":"api/#CliqueTrees.isperfect","page":"Library Reference","title":"CliqueTrees.isperfect","text":"isperfect(graph, order::AbstractVector[, index::AbstractVector])\n\nDetermine whether an fill-reducing permutation is perfect.\n\n\n\n\n\n","category":"function"},{"location":"#CliqueTrees.jl","page":"CliqueTrees.jl","title":"CliqueTrees.jl","text":"","category":"section"},{"location":"","page":"CliqueTrees.jl","title":"CliqueTrees.jl","text":"CliqueTrees.jl implements clique trees in Julia. You can use it to construct tree decompositions and chordal completions of graphs.","category":"page"},{"location":"#Installation","page":"CliqueTrees.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"CliqueTrees.jl","title":"CliqueTrees.jl","text":"To install CliqueTrees.jl, enter the Pkg REPL by typing ] and run the following command.","category":"page"},{"location":"","page":"CliqueTrees.jl","title":"CliqueTrees.jl","text":"pkg> add CliqueTrees","category":"page"},{"location":"#Basic-Usage","page":"CliqueTrees.jl","title":"Basic Usage","text":"","category":"section"},{"location":"#Tree-Decompositions","page":"CliqueTrees.jl","title":"Tree Decompositions","text":"","category":"section"},{"location":"","page":"CliqueTrees.jl","title":"CliqueTrees.jl","text":"The function cliquetree computes tree decompositions.","category":"page"},{"location":"","page":"CliqueTrees.jl","title":"CliqueTrees.jl","text":"julia> using CliqueTrees, LinearAlgebra, SparseArrays\n\njulia> graph = [\n           0 1 0 0 0 0 0 0\n           1 0 1 0 0 1 0 0\n           0 1 0 1 0 1 1 1\n           0 0 1 0 0 0 0 0\n           0 0 0 0 0 1 1 0\n           0 1 1 0 1 0 0 0\n           0 0 1 0 1 0 0 1\n           0 0 1 0 0 0 1 0\n       ];\n\njulia> label, tree = cliquetree(graph);\n\njulia> tree\n6-element CliqueTree{Int64, Int64}:\n [6, 7, 8]\n └─ [5, 7, 8]\n    ├─ [1, 5]\n    ├─ [3, 5, 7]\n    │  └─ [2, 3]\n    └─ [4, 5, 8]","category":"page"},{"location":"","page":"CliqueTrees.jl","title":"CliqueTrees.jl","text":"The clique tree tree is a tree decomposition of the permuted graph graph[label, label]. A clique tree is a vector of cliques, so you can retrieve the clique at node 4 by typing tree[4].","category":"page"},{"location":"","page":"CliqueTrees.jl","title":"CliqueTrees.jl","text":"julia> tree[4]\n3-element Clique{Int64, Int64}:\n 4\n 5\n 8","category":"page"},{"location":"","page":"CliqueTrees.jl","title":"CliqueTrees.jl","text":"warning: Warning\nThe numbers in each clique are vertices of the permuted graph graph[label, label]. You can see the vertices of the original graph by typingjulia> label[tree[4]]\n3-element Vector{Int64}:\n8\n3\n7Notice that the clique is no longer sorted.","category":"page"},{"location":"","page":"CliqueTrees.jl","title":"CliqueTrees.jl","text":"The width of a clique tree is computed by the function treewidth.","category":"page"},{"location":"","page":"CliqueTrees.jl","title":"CliqueTrees.jl","text":"julia> treewidth(tree)\n2","category":"page"},{"location":"#Chordal-Completions","page":"CliqueTrees.jl","title":"Chordal Completions","text":"","category":"section"},{"location":"","page":"CliqueTrees.jl","title":"CliqueTrees.jl","text":"Clique trees can be used to construct chordal completions.","category":"page"},{"location":"","page":"CliqueTrees.jl","title":"CliqueTrees.jl","text":"julia> filledgraph = FilledGraph(tree)\n{8, 11} FilledGraph{Int64, Int64}\n\njulia> sparse(filledgraph)\n8×8 SparseMatrixCSC{Bool, Int64} with 11 stored entries:\n ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅\n 1  ⋅  1  1  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  1  ⋅  1  1  ⋅  ⋅\n ⋅  ⋅  ⋅  1  1  1  1  ⋅","category":"page"},{"location":"","page":"CliqueTrees.jl","title":"CliqueTrees.jl","text":"The graph filledgraph is ordered: its edges are directed from lower to higher vertices. The underlying undirected graph is a chordal completion of the permuted graph graph[label, label].","category":"page"},{"location":"","page":"CliqueTrees.jl","title":"CliqueTrees.jl","text":"julia> chordalgraph = Symmetric(sparse(filledgraph), :L)\n8×8 Symmetric{Bool, SparseMatrixCSC{Bool, Int64}}:\n ⋅  ⋅  ⋅  ⋅  1  ⋅  ⋅  ⋅\n ⋅  ⋅  1  ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  1  ⋅  ⋅  1  ⋅  1  ⋅\n ⋅  ⋅  ⋅  ⋅  1  ⋅  ⋅  1\n 1  ⋅  1  1  ⋅  ⋅  1  1\n ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  1  1\n ⋅  ⋅  1  ⋅  1  1  ⋅  1\n ⋅  ⋅  ⋅  1  1  1  1  ⋅\n\njulia> ischordal(graph)\nfalse\n\njulia> ischordal(chordalgraph)\ntrue\n\njulia> all(graph[label, label] .<= chordalgraph)\ntrue","category":"page"},{"location":"#Graphs","page":"CliqueTrees.jl","title":"Graphs","text":"","category":"section"},{"location":"","page":"CliqueTrees.jl","title":"CliqueTrees.jl","text":"Users can input graphs as adjacency matrices. Additionally, CliqueTrees.jl supports the HasGraph type from Catlab.jl and the AbstractGraph type from Graphs.jl. Instances of the latter should implement the following subset of the abstract graph interface.","category":"page"},{"location":"","page":"CliqueTrees.jl","title":"CliqueTrees.jl","text":"is_directed\nne\nnv\noutneighbors\nvertices","category":"page"},{"location":"","page":"CliqueTrees.jl","title":"CliqueTrees.jl","text":"Self-edges are always ignored.","category":"page"},{"location":"#References","page":"CliqueTrees.jl","title":"References","text":"","category":"section"},{"location":"","page":"CliqueTrees.jl","title":"CliqueTrees.jl","text":"CliqueTrees.jl was inspired by the book Chordal Graphs and Semidefinite Optimization by Vandenberghe and Andersen.","category":"page"}]
}
